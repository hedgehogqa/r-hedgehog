% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen.R
\name{gen-monad}
\alias{gen-monad}
\alias{gen.bind}
\alias{gen.map}
\alias{gen.pure}
\alias{gen.with}
\title{Generator Monad}
\usage{
gen.with(g, f)

gen.bind(f, g)

gen.pure(x)

gen.map(m, g)
}
\arguments{
\item{g}{a generator to map or bind over}

\item{f}{a function from a value to a generator.}

\item{x}{a value to use as a generator}

\item{m}{a function to apply to values in the generator}
}
\description{
Hedgehog generators are functors and monads, allowing
one to map over them and use their results to create
more complex generators.
}
\details{
A generator can use R's random seed when constructing
its value, but all shrinks should be deterministic.

Generator's are functors and monads, meaning that one
can take the output of a generator and create a new
generator depending on the result.
}
\examples{
# To create a matrix
gen.map( function(x) { matrix(x, ncol=3) }, vec.of(6, gen.sample(1:30)) )

# Generating a vector whose length is defined by a generator
g <- gen.with( gen.sample(2:100), function(x) vec.of( x, gen.sample(1:10)))
gen.example ( g )
# [1] 8 6 2 7 5 4 2 2 4 6 4 6 6 3 6 7 8 5 4 6

# Same as above, as @bind@ is @with@ with arguments flipped.
g <- gen.bind( function(x) vec.of( x, gen.sample(1:10)), gen.sample(2:100))
gen.example ( g )
# [1] 8 6 2 7 5 4 2 2 4 6 4 6 6 3 6 7 8 5 4 6
}

