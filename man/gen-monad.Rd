% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen.R
\name{gen-monad}
\alias{gen}
\alias{gen-monad}
\alias{gen.bind}
\alias{gen.impure}
\alias{gen.map}
\alias{gen.pure}
\alias{gen.with}
\title{Generators}
\usage{
gen(t)

gen.with(g, f)

gen.bind(f, g)

gen.pure(x)

gen.impure(fg)

gen.map(m, g)
}
\arguments{
\item{t}{a function producing a tree from a size parameter, usually
an R function producing random values is used.}

\item{g}{a generator to map or bind over}

\item{f}{a function from a value to new generator, used to
build new generators monadically from a generator's
output}

\item{x}{a value to use as a generator}

\item{fg}{a function producing a single value from a size parameter}

\item{m}{a function to apply to values produced the generator}
}
\description{
A Hedgehog generator is a function, which, using R's
random seed, will build a lazy rose tree given a size
parameter, which represent a value to test, as well
as possible shrinks to try in the event of a failure.
Usually, one should compose the provided generators
instead of dealing with the gen contructor themselves.
}
\details{
Hedgehog generators are functors and monads, allowing
one to map over them and use their results to create
more complex generators.

A generator can use R's random seed when constructing
its value, but all shrinks should be deterministic.

In general, functions which accept a generator can also
be provided with a list of generators nested arbitrarily.

Generators which created from impure values (i.e., have
randomness), can be created with `gen.impure`, which
takes a function from `size` to a value. When using this
the function will not shrink, so it is best composed
`gen.shrink`.
}
\examples{
# To create a matrix
gen.map( function(x) { matrix(x, ncol=3) }, gen.c.of(6, gen.sample(1:30)) )

# To create a generator from a normal R random function
# (this generator does not shrink).
g <- gen.impure ( function(size) sample(1:10) )
gen.example ( g )
# [1]  5  6  3  4  8 10  2  7  9  1

# Generating a vector whose length is defined by a generator
g <- gen.with( gen.sample(2:100), function(x) gen.c.of( x, gen.sample(1:10)))
gen.example ( g )
# [1] 8 6 2 7 5 4 2 2 4 6 4 6 6 3 6 7 8 5 4 6

# Same as above, as @bind@ is @with@ with arguments flipped.
g <- gen.bind( function(x) gen.c.of( x, gen.sample(1:10)), gen.sample(2:100))
gen.example ( g )
# [1] 8 6 2 7 5 4 2 2 4 6 4 6 6 3 6 7 8 5 4 6
}

